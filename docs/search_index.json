[
["index.html", "Choose youR own Pythway Chapter 1 Welcome 1.1 How to use this book 1.2 About 1.3 Contributing", " Choose youR own Pythway Julia Stewart Lowndes and contributors 2020-11-18 Chapter 1 Welcome Hello! This book aims to empower scientists with resources to use to learn computational and open data science skills. Often, it is hard to even know which skills you need! This book’s “choose your own pathway” style invites you to choose an intentional and well-worn path rather than creating one from scratch. This book is not an exhaustive list of skill-building resources available but is highly curated, opinionated, and increasingly narrated to meet the needs of scientists that are new to coding and/or those looking to upgrade existing workflows. It is set up in a style that in ecology we call a “dicotomous key”, where depending to your answer to a prompt, you take yourself to a different part of the book. Resources center around open source languages and reproducible, collaborative workflows, including R, Python, Unix, and GitHub. 1.1 How to use this book Use this book to help create your learning plan to setup new analytical workflows and/or streamline existing ones. It will direct you to existing tutorials, communities, or scripts for each step, encouraging you to think deliberately along the way so that you can incrementally improve your skills and workflows. For example, if your current workflow requires multiple software interfaces and languages, this book will challenge you to think about whether you should focus on learning a new language or software, or on streamlining how languages or software interoperate. The theme is to reduce friction as much as possible, so you can focus on science. While you can use this book alone, it is much better to learn together (see Chapter 11!). Start with a colleague/friend; you can be “accountability buddies” for each other while you choose you own pathways together, and you can continue to be even as your paths diverge. Read more in the Preface in Chapter 2 and then go to Chapter 3 to choose your own pathway. 1.2 About We are developing this book specifically to meet the needs of biomedical scientists who are part of the Chan Zuckerberg Initiative’s Neurodegenerative Challenge Network — but it is designed for wide use across research domains. It is led, edited and maintained by Julia Stewart Lowndes and Openscapes with help from a growing number of NDCN contributors, including you. Demonstrating the power of open source not only for analysis but for communication, the book is written in R (bookdown) and published through GitHub. Contributors include: NDCN Computational Advisors NDCN Office Hours participants Justin Savage Oliver Tam 1.3 Contributing This imperfect and incomplete book is a work in progress. But it is available openly as a resource while it is iteratively improved. Please help us improve! Do you have an idea for resources, improvements on text, or a better title for the book? (This book’s title is really not great. It aims to give the reader a sense of participation — without infringing on copyright — and a sense of R and Python.) We welcome contributions: please edit the book or share resources that have helped you via email or GitHub. We are thankful for your contributions and will include them after considering whether they fit within our opinionated framework and audience needs. This book is licensed under a Creative Commons Attribution 4.0 International License. "],
["preface.html", "Chapter 2 Preface", " Chapter 2 Preface as scientists, don’t have time to start from the beginning we need welcoming entryways a lot of wonderful tutorials out there to learn the thing you want. But what about when you don’t know exactly what you need? Or you want to streamline? this book tries to help you find entryways and think about what you need not a comprehensive list of choices but some well-worn pathways opinionated to limit choice (opinions by Lowndes and others — attribution identified) written for scientists by scientists You’ll notice that tutorials might frame introductory lessons around either how the language works or how to use it. For example, two different introductory Python lessons from the Carpentries are framed around programming (i.e. how Python works) and on data analysis (i.e. how to use it). Both approaches are important and might provide entryways to learners with different motivations for learning: learning how it works might be helpful if you want to learn fundamentals so you can think of how to applly them, where as learning how to use it might be preferred if you have a specific project in mind. "],
["what-to-learn.html", "Chapter 3 What should I learn? 3.1 Learn a new language 3.2 Image analysis 3.3 RNA Sequencing 3.4 Project Management &amp; Workflows 3.5 GitHub 3.6 Data Sharing 3.7 Machine Learning (ML) 3.8 Plotting 3.9 Publishing 3.10 Containers", " Chapter 3 What should I learn? Modern scientific coders often operate with many coding languages and software in our workflows. But getting started, we often have a primary language that we use along with a suite of concepts and that help us develop workflows and interoperate between languages and software to do our analytical research. Learning one language to do a task at hand can help you develop skills and mindsets that can be transferrable when you come upon other tasks. A great thing about modern computation is that there are multiple ways to do the same thing. But this can also be a really challenging thing too: what should you learn? And in which order? This chapter aims to help you find resources to learn what you need. 3.1 Learn a new language Introductory tutorials will help you install software and get comfortable using it. They will also and help you develop the mindset to seek out existing code that works (including your own!) and adapt it for your analyses. You want to learn: R to get a sense of coding in R…4.1 to learn R…4.2 Python to get a sense of coding in Python…5.1 to learn Python…5.2 The Command Line… 3.2 Image analysis Learn more about image analysis techniques and software with the image.sc community…11.3 You want to learn: CellProfiler… https://cellprofiler.org/ ImageJ… with no previous coding experience…7.1 to write automated macros and plugins…7.2 QuPath… https://qupath.github.io/ Napari… https://github.com/sofroniewn/napari-training-course - Nick Sofroniew 3.3 RNA Sequencing Molly Hammell software Gene Yeo UCSD course 3.4 Project Management &amp; Workflows Google Drive / Box / Dropbox… AWS… Project-oriented workflows….9.3 R Markdown…4.4 Jupyter Notebooks… GitHub Issues…8.3 evcouplings pipeline…10.2 text editors (could be its own chapter) 3.5 GitHub intro with R …?? walking back changes with R…8.2 Issues…8.3 3.6 Data Sharing Platforms for data sharing 3.7 Machine Learning (ML) Intro to ML conceptually … Intro ML in R….4.6 Intro ML in Python…. 3.8 Plotting should this be a section or page? 3.9 Publishing create its own page GitHub for Publishing…8.3 3.10 Containers Docker … "],
["rstats.html", "Chapter 4 R 4.1 Get a sense of R 4.2 Intro to R with RStudio/tidyverse 4.3 Statistics with R 4.4 RMarkdown 4.5 Shiny 4.6 Machine Learning", " Chapter 4 R Preamble: thought of as just for statistics…Why do you want to learn R? R is a programming language with roots in statistics but also for powerful for data science and reproducible research. 4.1 Get a sense of R R best practices - Krista DeStasio How to Clean Messy Data in R - David Keyes Data Wrangling Part 1: Basic to Advanced Ways to Select Columns - Suzan Baert 4.2 Intro to R with RStudio/tidyverse Many modern R users interact with R through RStudio. RStudio provides a software interface (called the IDE: Integrated Development Environment), concepts of tidy data, analytical packages (including tidyverse and tidymodels), reproducible reporting and publishing (RMarkdown, bookdown, blogdown), and interactive dashboards (Shiny), and a powerful user and developer community (#rstats). R for Excel Users - Julia Lowndes &amp; Allison Horst This is for anyone, not just Excel users! Assumes no previous coding experience, and teaches R as a workflow with GitHub and RMarkdown, with a focus on collaboration &amp; reproducibility. R for Data Science - Hadley Wickham &amp; Garrett Grolemund THE go-to resource for learning R with the tidyverse. learn with the R4DS community…11.1.1 R Education for Beginners - RStudio Education 4.3 Statistics with R Statistics and R - Rafael Irizarry &amp; Michael Love Check out the follow-up courses from this series Modern Statistics for Modern Biology - Susan Holmes &amp; Wolfgang Huber Introduction to (environmental) data analysis &amp; stats in R - Allison Horst Assumes no previous experience with R or stats. Also teaches GitHub Advanced methods for (environmental) data analysis in R - Allison Horst Assumes you’ve taken the previous course above 4.4 RMarkdown This What is RMarkdown 1-minute video describes how RMarkdown powerfully combines simple text formatting with executable R code (also called literate programming), fueling efficient, reproducible research. R Markdown is also powerful for publishing. RStudio’s RMarkdown Website - RStudio Assumes no previous experience with RMarkdown, and has a showcase Gallery RMarkdown: The Definitive Guide - Yihui Xie, J.J. Allaire, Garrett Grolemund RMarkdown Cookbook - Yihui Xie, Christophe Dervieux, Emily Reiderer RMarkdown for Scientists - Nick Tierney 3-hour lesson book RMarkdown Driven Development - Emily Riederer Assumes familiarity with RMarkdown and describes “the progression of stages between a single ad-hoc RMarkdown script and more advanced and reusable data products like R projects and packages.” Making free websites with RStudio’s R Markdown - Julie Lowndes 1-hour tutorial to make and publish a free website, no R required How I teach RMarkdown - Alison Hill 4.5 Shiny Mastering Shiny - Hadley Wickham Shiny tips &amp; tricks for improving your apps and solving common problems - Dean Attali 4.6 Machine Learning tidymodels by RStudio Education Supervised Machine Learning for Text Analysis in R by Emil Hvitfeldt and Julia Silge "],
["python.html", "Chapter 5 Python 5.1 Getting a sense of Python 5.2 Learning Python 5.3 Machine Learning", " Chapter 5 Python Python is a very powerful language for programming and data science and has wide use in scientific communities. The Python Docs website has links to news and resources, and their Hitchhiker’s guide to Python provides a nice overview and links to many tutorials sorted by beginner, intermediate, and advanced. Versions. Python had some upgrades between versions 2 and 3 in ~2010, and it’s important to keep this in mind as you learn. A recommendation is that if you’re learning Python to create your own new workflows, focus on Python 3, and if you’ll primarily be running older workflows, focus on Python 2. Either way, the majority of your learning will be the same. R users. If you are an R user, consider using Python in RStudio with reticulate to reduce the overhead for getting started. 5.1 Getting a sense of Python Reading blog posts are also a good way for getting a sense of Python, and you can follow along with many hands-on. Testers and Data Science - Jeff Nyman 4-part blog describing considerations for data science; you can follow hands-on with Python from Jupyter notebooks Python 3 Python Recipe: Open a file, read it, print matching lines - Ben Welsh Nice narrative with minimal code describing wanting to search for a pattern in a file and save the search results Python 2 5.2 Learning Python Programming with Python - The Carpentries (Software Carpentry) Assumes no previous coding experience, and setup recommends using Anaconda and Jupyter Notebooks. Recommended as an intro to how Python works for programming (see next). Python 3 Data analysis and visualization in Python for ecologists - The Carpentries (Data Carpentry) Not just for ecologists! Assumes no previous coding experience, and setup recommends using Anaconda and Jupyter Notebooks. Recommended as an intro from how to use Python for data analysis (see previous). Python 3 A Whirlwind Tour of Python - Jake VanderPlas Says it assumes familiarity with programming in another language, but is a nice overview for any beginner, and \"particularly designed for those who wish to use Python for data science and/or scientific programming Serves as an introduction to his longer book (listed next): The Python Data Science Handbook - Jake VanderPlas Says it assumes familiarity with programming in another language, but a nice start for any beginner Setup available to run code in Jupyter Notebooks and Google Collab Python 3 Python for Data Analysis - Luke Thompson Assumes no previous experience coding. Numbered lessons also include intro to the command line. Scipy Lecture Notes - Edited by Varoquaux et al. Assumes some familiarity with coding concepts Python 3 Python Introduction - Google for Education Assumes strong familiarity with coding concepts, for example that you are learning Python as a second programming language. Python 2 5.2.1 Setting up a python environment Creating a reproducible (python-centric) environment - Chris Sifuentes These slides from NDCN Office Hours describe what an environment is, why it’s important for reproducibility, and how to set it up in Python 5.3 Machine Learning Introduction to Machine Learning - Lawrence Carin, Coursera This course will “provide you a foundational understanding of machine learning models (logistic regression, multilayer perceptrons, convolutional neural networks, natural language processing, etc.) as well as demonstrate how these models can solve complex problems in a variety of industries, from medical diagnostics to image recognition to text prediction.” "],
["command-line.html", "Chapter 6 The Command Line 6.1 Getting a sense of the command line", " Chapter 6 The Command Line The Command Line has many names, including Unix, bash, Terminal (on a Mac). There can be slight differences between these, but largely they are interchangeable, especially as we’re getting started. 6.1 Getting a sense of the command line Friendly introduction to the command line "],
["imagej.html", "Chapter 7 ImageJ 7.1 Intro to ImageJ and FIJI 7.2 ImageJ Macros 7.3 ImageJ Plugins", " Chapter 7 ImageJ ImageJ is software developed by the NIH for image analysis. The FIJI version comes packaged with many plugins which allow for many common image analysis methods you may need, and is the recommended version to use. The main appeal of ImageJ over other software choices (like Python) because it enables you to analyze images with minimal coding. From the ImageJ homepage: ImageJ is an open source image processing program designed for scientific multidimensional images. It is also highly extensible, with thousands of plugins and scripts for performing a wide variety of tasks, and a large user community. 7.1 Intro to ImageJ and FIJI FIJI (“Fiji Is Just ImageJ”) is the recommended version of ImageJ. Intro to ImageJ - ImageJ Team Assumes no previous experience. Links to Getting Started and Tutorials. 7.2 ImageJ Macros Macros are a way to automate a series of ImageJ commands for image analysis in ImageJ with minimal coding. They are usually written in a special ImageJ macro language that is like a simpler version of Java. You can create a macro by recording a series of commands you make, and you can also reuse or remix hundreds of existing macros from the community. ImageJ Macro Language - ImageJ Team Assumes no previous coding experience. 7.3 ImageJ Plugins As the ImageJ Macro language is quite limited in the calculations it can perform itself, you may find that is unable to run the types of analysis you are trying to do (or that it does them very slowly). The way to remedy this is to write your own Java plugin which adds functionality to ImageJ. How To Make Fiji Plugin - ImageJ Fiji YouTube Channel Assumes familiarity with Java. Recommended to use Eclipse to easily develop your Java code and to edit an existing plugin .jar file so that the maven packaging of the plugin is easier to manage. Note: this example uses an older version of the ImageJ API, so we recommend using a newer plugin like Skeletonize3D instead. "],
["git-gh.html", "Chapter 8 Git/GitHub 8.1 Git/GitHub Setup 8.2 Fixing mistakes 8.3 GitHub Issues", " Chapter 8 Git/GitHub Git is powerful software that tracks files on your local computer and takes care of the versioning (line-by-line!) and bookkeeping that you might otherwise do yourself, for example with filenames like analysis_final_v3.R. GitHub is an online platform that socializes Git’s versioning capabilities, archiving your files online and enabling you to share and collaborate with others, and also opens a whole world of publishing. Git and GitHub were not designed for scientists as primary users, so there are a lot of powerful features (branches, pull requests) that might not be immediately useful for scientists just getting started. And that’s okay! Interacting with GitHub from the browser is a fine way to start. 8.1 Git/GitHub Setup There are several ways to interact with Git and GitHub from your computer, allowing folks to use what they are most comfortable with and/or already using in their workflows. GitHub from the Browser - Julie Lowndes, NDCN Office Hours 20-minute overview and first hands-on experience from the browser (recommended as an empowering, collaborative first experience, but not for computational workflows) GitHub Application - GitHub Software (GUI interface) for Mac, Windows, etc GitHub from the Command Line 8.1.1 GitHub for R users If you are an R user, you can interact with GitHub directly from RStudio, which enables a very streamlined workflow without extra software or need for the command line (for most daily needs). Happy Git for the UseR - Jenny Bryan This is THE best resource for setting up and using GitHub with RStudio. Particularly important chapters include: Troubleshooting: RStudio, Git, GitHub Hell and Setting up GitHub from an existing project. GitHub with RStudio - Julia Lowndes &amp; Allison Horst, R for Excel Users Also see the chapter on Collaborating with others using GitHub 8.2 Fixing mistakes GitHub: A beginner’s guide to going back in time (aka fixing mistakes) - Melanie Frazier 8.3 GitHub Issues GitHub for project management - Openscapes Assumes no previous experience or installation; based in the web browser GitHub for publishing - Openscapes Assumes no previous experience or installation; based in the web browser "],
["workflows.html", "Chapter 9 Workflows 9.1 Documentation 9.2 Naming files 9.3 Project-oriented workflows 9.4 Reproducible research in action 9.5 SQL and R", " Chapter 9 Workflows There are a lot of steps involved in computational analyses, and documenting those steps is really important for efficiency and reproducibility. Documentation can go along with code that automates these steps, and there are often opportunities to streamline how steps work together and how you as the user has to interoperate between software applications or languages. You can get inspired with this list of awesome pipelines. All of this is critically important for Future You, who is the person most likely to build off of your own work. And let’s also think about Future Us: the idea that someone different will need to understand this project someday (a future student, collaborator, peer-reviewer, boss). Creating documents that serve to “onboard” others to your workflows is a great thing to create, as well as creating a daily log or diary for yourself of what you’ve done and what steps are involved. Talking about workflows with your direct collaborators as well as your colleagues is a big part of iteratively improving them — so you can focus more time on Science and less on bookkeeping by hand. 9.1 Documentation Writing down a “recipe” of analytical steps somewhere is more important than how you do it — but it should be discoverable by you and your lab (including interns and visitors). Collaborative software like Google Docs, Box, Dropbox, GitHub, are a great place for this — and the more even better if publicly available online for others to use. Protocols.io An application to create, organize, edit, collaborate, and publish your lab’s data and protocols. “Like Dryad for data or GitHub for code, protocols.io is a repository for protocols” 9.2 Naming files Naming files deliberately are a huge part of streamlining workflows. How to name files - Jenny Bryan short slide deck championing 3 filenaming principles 9.3 Project-oriented workflows What They Forgot to Teach You About R R-focused, but Chapters 1-4 particularly are relevant no matter the language 9.4 Reproducible research in action The Practice of Reproducible Research: Case Studies and Lessons from the Data-Intensive Sciences - Justin Kitzes, Daniel Turek, Fatma Deniz (Editors) Examples highlighting R, Python, open science, cloud computing, neuroimaging, and more 9.5 SQL and R Using SQL in RStudio Assumes you are already an R/RStudio user. For a refresher…4.2 "],
["ndcn-pipelines.html", "Chapter 10 NDCN Pipelines 10.1 Quantitative Methods in Genetics and Genomics Course 10.2 evcouplings pipeline", " Chapter 10 NDCN Pipelines Preamble: 10.1 Quantitative Methods in Genetics and Genomics Course Quantitative Methods in Genetics and Genomics Course - Gene Yeo and others Assumes… 10.2 evcouplings pipeline EVcouplings Python Framework Marks lab, https://evcouplings.org/ "],
["community.html", "Chapter 11 Community learning 11.1 Language-based communities 11.2 Parkinsons Disease 11.3 Image.sc Forum 11.4 Neubias 11.5 Build your own local community 11.6 Other training opportunities 11.7 Further Reading", " Chapter 11 Community learning The Internet is full of resources for learning and troubleshooting how to code, and those resources are created by communities of people: software developers, researchers, teachers, and learners. Here are some communities to engage with. Instead of referring to myself as self-taught, I&#39;m gonna start referring to myself as community-taught. The sites, the blogs, the books, the user groups, the confs, the forums ... all community efforts that I used to learn and advance my programming and data science knowledge.&mdash; Steph Locke (@TheStephLocke) January 7, 2020 Twitter is a powerful tool and resource for coding. This is where developers, users, teachers, and learners share what they are working on, where they are stuck, how they have solved challenges. It is a place for thoughtful conversations in the coding community. Some advice and examples in the Q&amp;A part of this Openscapes blog post. Slack is another powerful tool for communities, where folks can interact and learn how to become good teachers and mentors by engaging an a network. Why should we use Slack? Here are some slides and a blog blog to help answer that question (Hicks &amp; Collado-Torres). 11.1 Language-based communities Open source coding languages are powerful and dynamic because of their communities of developers, users, teachers, and learners from diverse backgrounds. The Carpentries is a teaching and learning community that spans many coding languages, has all their material online available for self-paced learning, and has many ways to get involved. 11.1.1 R The R community has many overlapping communities, many of which also have a presence on Twitter and use the #rstats hashtag. Some of these communities include: RStudio rOpenSci RLadies Additional Slack channels: R for Data Science (R4DS) Online Learning Community 11.1.2 Python {community-python} Python’s main Twitter hashtags are #pydata and #python. Some communities to engage with: pyOpenSci Pangeo 11.2 Parkinsons Disease https://parkinsonsroadmap.org/gp2/bioinformatics 11.3 Image.sc Forum The focus of Forum.image.sc is software-oriented aspects of scientific imaging, particularly (but not limited to) image analysis, processing, acquisition, storage, and management of digital scientific images. Community partners and conversations include ImageJ, CellProfiler, Napari, QuPath, and more! 11.4 Neubias NEUBIAS (Network of EUropean BioImage AnalystS) is a community developing resources for bioimage analysts. Of particular interest is the Academy @ Home training series. Of particular interest might be interactive bioimage analysis with Python and Jupyter (Parts 1 and 2). 11.5 Build your own local community Communities like RLadies enable you to create local meetups linked to the global network. You can also create local communities or lead local events. Here are some examples and ideas: Example communities Eco-data-science Our coding club Example events From resblazblog: hacky hours tidy tuesday meetups hackathons 11.6 Other training opportunities https://neuromatch.io/academy/ this is a bit more neuroscience than ND (eg more on neurophysiology side than genomics/omics) https://tess.elixir-europe.org/about 11.7 Further Reading Cereceda &amp; Quinn. 2020. A graduate student perspective on overcoming barriers to interacting with open-source software, Facets Sansing. Open Facilitation "],
["scripts.html", "Chapter 12 Scripts 12.1 scripts to organize &amp; name incoming imaging files", " Chapter 12 Scripts Preamble These scripts are contributed from the NDCN community and have been adapted or “remixed” by other community members during office hours hackathons, etc. All scripts will be in a GitHub repo. 12.1 scripts to organize &amp; name incoming imaging files in language X… "]
]
